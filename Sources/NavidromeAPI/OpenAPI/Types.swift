// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Login
    ///
    /// - Remark: HTTP `POST /auth/login`.
    /// - Remark: Generated from `#/paths//auth/login/post`.
    func post_sol_auth_sol_login(_ input: Operations.post_sol_auth_sol_login.Input) async throws -> Operations.post_sol_auth_sol_login.Output
    /// - Remark: HTTP `GET /api/album`.
    /// - Remark: Generated from `#/paths//api/album/get`.
    func get_sol_api_sol_album(_ input: Operations.get_sol_api_sol_album.Input) async throws -> Operations.get_sol_api_sol_album.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Login
    ///
    /// - Remark: HTTP `POST /auth/login`.
    /// - Remark: Generated from `#/paths//auth/login/post`.
    public func post_sol_auth_sol_login(
        headers: Operations.post_sol_auth_sol_login.Input.Headers = .init(),
        body: Operations.post_sol_auth_sol_login.Input.Body
    ) async throws -> Operations.post_sol_auth_sol_login.Output {
        try await post_sol_auth_sol_login(Operations.post_sol_auth_sol_login.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /api/album`.
    /// - Remark: Generated from `#/paths//api/album/get`.
    public func get_sol_api_sol_album(
        query: Operations.get_sol_api_sol_album.Input.Query = .init(),
        headers: Operations.get_sol_api_sol_album.Input.Headers = .init()
    ) async throws -> Operations.get_sol_api_sol_album.Output {
        try await get_sol_api_sol_album(Operations.get_sol_api_sol_album.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/AuthenticationResult`.
        public struct AuthenticationResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuthenticationResult/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/AuthenticationResult/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/AuthenticationResult/username`.
            public var username: Swift.String
            /// - Remark: Generated from `#/components/schemas/AuthenticationResult/isAdmin`.
            public var isAdmin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AuthenticationResult/avatar`.
            public var avatar: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthenticationResult/subsonicSalt`.
            public var subsonicSalt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthenticationResult/subsonicToken`.
            public var subsonicToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AuthenticationResult/token`.
            public var token: Swift.String
            /// Creates a new `AuthenticationResult`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - username:
            ///   - isAdmin:
            ///   - avatar:
            ///   - subsonicSalt:
            ///   - subsonicToken:
            ///   - token:
            public init(
                id: Swift.String,
                name: Swift.String,
                username: Swift.String,
                isAdmin: Swift.Bool,
                avatar: Swift.String? = nil,
                subsonicSalt: Swift.String? = nil,
                subsonicToken: Swift.String? = nil,
                token: Swift.String
            ) {
                self.id = id
                self.name = name
                self.username = username
                self.isAdmin = isAdmin
                self.avatar = avatar
                self.subsonicSalt = subsonicSalt
                self.subsonicToken = subsonicToken
                self.token = token
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case username
                case isAdmin
                case avatar
                case subsonicSalt
                case subsonicToken
                case token
            }
        }
        /// - Remark: Generated from `#/components/schemas/Album`.
        public struct Album: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Album/playCount`.
            public var playCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Album/playDate`.
            public var playDate: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Album/rating`.
            public var rating: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Album/starred`.
            public var starred: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Album/starredAt`.
            public var starredAt: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Album/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Album/libraryId`.
            public var libraryId: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Album/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Album/embedArtPath`.
            public var embedArtPath: Swift.String
            /// - Remark: Generated from `#/components/schemas/Album/artistId`.
            public var artistId: Swift.String
            /// - Remark: Generated from `#/components/schemas/Album/artist`.
            public var artist: Swift.String
            /// - Remark: Generated from `#/components/schemas/Album/albumArtistId`.
            public var albumArtistId: Swift.String
            /// - Remark: Generated from `#/components/schemas/Album/albumArtist`.
            public var albumArtist: Swift.String
            /// - Remark: Generated from `#/components/schemas/Album/allArtistIds`.
            public var allArtistIds: Swift.String
            /// - Remark: Generated from `#/components/schemas/Album/maxYear`.
            public var maxYear: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Album/minYear`.
            public var minYear: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Album/date`.
            public var date: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/maxOriginalYear`.
            public var maxOriginalYear: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Album/minOriginalYear`.
            public var minOriginalYear: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Album/originalDate`.
            public var originalDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/releaseDate`.
            public var releaseDate: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/releases`.
            public var releases: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Album/compilation`.
            public var compilation: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Album/songCount`.
            public var songCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Album/duration`.
            public var duration: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Album/size`.
            public var size: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Album/genre`.
            public var genre: Swift.String
            /// - Remark: Generated from `#/components/schemas/Album/genres`.
            public var genres: [Components.Schemas.Genre]?
            /// - Remark: Generated from `#/components/schemas/Album/sortAlbumName`.
            public var sortAlbumName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/sortAlbumArtistName`.
            public var sortAlbumArtistName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/orderAlbumName`.
            public var orderAlbumName: Swift.String
            /// - Remark: Generated from `#/components/schemas/Album/orderAlbumArtistName`.
            public var orderAlbumArtistName: Swift.String
            /// - Remark: Generated from `#/components/schemas/Album/imageFiles`.
            public var imageFiles: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/paths`.
            public var paths: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/smallImageUrl`.
            public var smallImageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/mediumImageUrl`.
            public var mediumImageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/largeImageUrl`.
            public var largeImageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/externalUrl`.
            public var externalUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Album/externalInfoUpdatedAt`.
            public var externalInfoUpdatedAt: Foundation.Date?
            /// Creates a new `Album`.
            ///
            /// - Parameters:
            ///   - playCount:
            ///   - playDate:
            ///   - rating:
            ///   - starred:
            ///   - starredAt:
            ///   - id:
            ///   - libraryId:
            ///   - name:
            ///   - embedArtPath:
            ///   - artistId:
            ///   - artist:
            ///   - albumArtistId:
            ///   - albumArtist:
            ///   - allArtistIds:
            ///   - maxYear:
            ///   - minYear:
            ///   - date:
            ///   - maxOriginalYear:
            ///   - minOriginalYear:
            ///   - originalDate:
            ///   - releaseDate:
            ///   - releases:
            ///   - compilation:
            ///   - songCount:
            ///   - duration:
            ///   - size:
            ///   - genre:
            ///   - genres:
            ///   - sortAlbumName:
            ///   - sortAlbumArtistName:
            ///   - orderAlbumName:
            ///   - orderAlbumArtistName:
            ///   - imageFiles:
            ///   - paths:
            ///   - description:
            ///   - smallImageUrl:
            ///   - mediumImageUrl:
            ///   - largeImageUrl:
            ///   - externalUrl:
            ///   - externalInfoUpdatedAt:
            public init(
                playCount: Swift.Int? = nil,
                playDate: Foundation.Date? = nil,
                rating: Swift.Int? = nil,
                starred: Swift.Bool? = nil,
                starredAt: Foundation.Date? = nil,
                id: Swift.String,
                libraryId: Swift.Int,
                name: Swift.String,
                embedArtPath: Swift.String,
                artistId: Swift.String,
                artist: Swift.String,
                albumArtistId: Swift.String,
                albumArtist: Swift.String,
                allArtistIds: Swift.String,
                maxYear: Swift.Int,
                minYear: Swift.Int,
                date: Swift.String? = nil,
                maxOriginalYear: Swift.Int,
                minOriginalYear: Swift.Int,
                originalDate: Swift.String? = nil,
                releaseDate: Swift.String? = nil,
                releases: Swift.Int,
                compilation: Swift.Bool,
                songCount: Swift.Int,
                duration: Swift.Double,
                size: Swift.Int,
                genre: Swift.String,
                genres: [Components.Schemas.Genre]? = nil,
                sortAlbumName: Swift.String? = nil,
                sortAlbumArtistName: Swift.String? = nil,
                orderAlbumName: Swift.String,
                orderAlbumArtistName: Swift.String,
                imageFiles: Swift.String? = nil,
                paths: Swift.String? = nil,
                description: Swift.String? = nil,
                smallImageUrl: Swift.String? = nil,
                mediumImageUrl: Swift.String? = nil,
                largeImageUrl: Swift.String? = nil,
                externalUrl: Swift.String? = nil,
                externalInfoUpdatedAt: Foundation.Date? = nil
            ) {
                self.playCount = playCount
                self.playDate = playDate
                self.rating = rating
                self.starred = starred
                self.starredAt = starredAt
                self.id = id
                self.libraryId = libraryId
                self.name = name
                self.embedArtPath = embedArtPath
                self.artistId = artistId
                self.artist = artist
                self.albumArtistId = albumArtistId
                self.albumArtist = albumArtist
                self.allArtistIds = allArtistIds
                self.maxYear = maxYear
                self.minYear = minYear
                self.date = date
                self.maxOriginalYear = maxOriginalYear
                self.minOriginalYear = minOriginalYear
                self.originalDate = originalDate
                self.releaseDate = releaseDate
                self.releases = releases
                self.compilation = compilation
                self.songCount = songCount
                self.duration = duration
                self.size = size
                self.genre = genre
                self.genres = genres
                self.sortAlbumName = sortAlbumName
                self.sortAlbumArtistName = sortAlbumArtistName
                self.orderAlbumName = orderAlbumName
                self.orderAlbumArtistName = orderAlbumArtistName
                self.imageFiles = imageFiles
                self.paths = paths
                self.description = description
                self.smallImageUrl = smallImageUrl
                self.mediumImageUrl = mediumImageUrl
                self.largeImageUrl = largeImageUrl
                self.externalUrl = externalUrl
                self.externalInfoUpdatedAt = externalInfoUpdatedAt
            }
            public enum CodingKeys: String, CodingKey {
                case playCount
                case playDate
                case rating
                case starred
                case starredAt
                case id
                case libraryId
                case name
                case embedArtPath
                case artistId
                case artist
                case albumArtistId
                case albumArtist
                case allArtistIds
                case maxYear
                case minYear
                case date
                case maxOriginalYear
                case minOriginalYear
                case originalDate
                case releaseDate
                case releases
                case compilation
                case songCount
                case duration
                case size
                case genre
                case genres
                case sortAlbumName
                case sortAlbumArtistName
                case orderAlbumName
                case orderAlbumArtistName
                case imageFiles
                case paths
                case description
                case smallImageUrl
                case mediumImageUrl
                case largeImageUrl
                case externalUrl
                case externalInfoUpdatedAt
            }
        }
        /// - Remark: Generated from `#/components/schemas/Genre`.
        public struct Genre: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Genre/id`.
            public var id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Genre/name`.
            public var name: Swift.String
            /// Creates a new `Genre`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            public init(
                id: Swift.String? = nil,
                name: Swift.String
            ) {
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// - Remark: Generated from `#/components/parameters/PageOffset`.
        public typealias PageOffset = Swift.Int32
        /// - Remark: Generated from `#/components/parameters/PageEnd`.
        public typealias PageEnd = Swift.Int32
        /// - Remark: Generated from `#/components/parameters/Order`.
        @frozen public enum Order: String, Codable, Hashable, Sendable, CaseIterable {
            case ASC = "ASC"
            case DESC = "DESC"
        }
        /// - Remark: Generated from `#/components/parameters/Sort`.
        public typealias Sort = Swift.String
        /// - Remark: Generated from `#/components/parameters/ArtistId`.
        public typealias ArtistId = Swift.String
        /// - Remark: Generated from `#/components/parameters/Starred`.
        public typealias Starred = Swift.Bool
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Login
    ///
    /// - Remark: HTTP `POST /auth/login`.
    /// - Remark: Generated from `#/paths//auth/login/post`.
    public enum post_sol_auth_sol_login {
        public static let id: Swift.String = "post/auth/login"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/login/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_login.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.post_sol_auth_sol_login.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.post_sol_auth_sol_login.Input.Headers
            /// - Remark: Generated from `#/paths/auth/login/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/login/POST/requestBody/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/paths/auth/login/POST/requestBody/json/username`.
                    public var username: Swift.String?
                    /// - Remark: Generated from `#/paths/auth/login/POST/requestBody/json/password`.
                    public var password: Swift.String?
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - username:
                    ///   - password:
                    public init(
                        username: Swift.String? = nil,
                        password: Swift.String? = nil
                    ) {
                        self.username = username
                        self.password = password
                    }
                    public enum CodingKeys: String, CodingKey {
                        case username
                        case password
                    }
                }
                /// - Remark: Generated from `#/paths/auth/login/POST/requestBody/content/application\/json`.
                case json(Operations.post_sol_auth_sol_login.Input.Body.jsonPayload)
            }
            public var body: Operations.post_sol_auth_sol_login.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.post_sol_auth_sol_login.Input.Headers = .init(),
                body: Operations.post_sol_auth_sol_login.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/login/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/login/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AuthenticationResult)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AuthenticationResult {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.post_sol_auth_sol_login.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.post_sol_auth_sol_login.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//auth/login/post/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.post_sol_auth_sol_login.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.post_sol_auth_sol_login.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /api/album`.
    /// - Remark: Generated from `#/paths//api/album/get`.
    public enum get_sol_api_sol_album {
        public static let id: Swift.String = "get/api/album"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/api/album/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/album/GET/query/_start`.
                public var _start: Components.Parameters.PageOffset?
                /// - Remark: Generated from `#/paths/api/album/GET/query/_end`.
                public var _end: Components.Parameters.PageEnd?
                /// - Remark: Generated from `#/components/parameters/Order`.
                @frozen public enum Order: String, Codable, Hashable, Sendable, CaseIterable {
                    case ASC = "ASC"
                    case DESC = "DESC"
                }
                /// - Remark: Generated from `#/paths/api/album/GET/query/_order`.
                public var _order: Components.Parameters.Order?
                /// - Remark: Generated from `#/paths/api/album/GET/query/_sort`.
                public var _sort: Components.Parameters.Sort?
                /// - Remark: Generated from `#/paths/api/album/GET/query/artist_id`.
                public var artist_id: Components.Parameters.ArtistId?
                /// - Remark: Generated from `#/paths/api/album/GET/query/starred`.
                public var starred: Components.Parameters.Starred?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _start:
                ///   - _end:
                ///   - _order:
                ///   - _sort:
                ///   - artist_id:
                ///   - starred:
                public init(
                    _start: Components.Parameters.PageOffset? = nil,
                    _end: Components.Parameters.PageEnd? = nil,
                    _order: Components.Parameters.Order? = nil,
                    _sort: Components.Parameters.Sort? = nil,
                    artist_id: Components.Parameters.ArtistId? = nil,
                    starred: Components.Parameters.Starred? = nil
                ) {
                    self._start = _start
                    self._end = _end
                    self._order = _order
                    self._sort = _sort
                    self.artist_id = artist_id
                    self.starred = starred
                }
            }
            public var query: Operations.get_sol_api_sol_album.Input.Query
            /// - Remark: Generated from `#/paths/api/album/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_api_sol_album.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.get_sol_api_sol_album.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.get_sol_api_sol_album.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.get_sol_api_sol_album.Input.Query = .init(),
                headers: Operations.get_sol_api_sol_album.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/api/album/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/api/album/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Album])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Album] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.get_sol_api_sol_album.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.get_sol_api_sol_album.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//api/album/get/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.get_sol_api_sol_album.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.get_sol_api_sol_album.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
